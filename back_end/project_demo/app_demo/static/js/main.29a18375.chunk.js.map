{"version":3,"sources":["components/LoginAndRegister/LoginAndRegister.jsx","App.js","serviceWorker.js","index.js"],"names":["StringResource","username","password","register_username","register_password","register_confirm_password","LoginAndRegisterBase","state","visible","confirmLoading","funcHandleSubmitLogin","e","preventDefault","props","form","validateFields","err","values","a","async","funcHandleSubmitRegister","setState","axios","post","handleConfirmBlur","value","target","confirmDirty","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","handleCancel","console","log","funcShowRegisterModal","getFieldDecorator","this","className","title","extra","onSubmit","Item","rules","required","message","prefix","type","style","color","placeholder","htmlType","onClick","centered","onOk","onCancel","width","labelCol","span","wrapperCol","handleSubmit","label","hasFeedback","validator","Password","onBlur","Component","LoginAndRegister","Form","create","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29a18375.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nimport 'antd/dist/antd.css';\nimport './LoginAndRegister.css';\nimport { Form, Icon, Input, Button, Modal, Card } from 'antd';\n\nimport axios from 'axios'\n\nclass StringResource {\n    static username = 'username';\n    static password = 'password';\n    static register_username = 'register_username';\n    static register_password = 'register_password';\n    static register_confirm_password = 'register_confirm_password';\n}\n\n\nclass LoginAndRegisterBase extends Component {\n    state = {\n        visible: false,\n        confirmLoading: false,\n    };\n\n\n    funcHandleSubmitLogin = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields([StringResource.username, StringResource.password], async (err, values) => {\n            if (!err) {\n                //console.log('Received values of form: ', values);\n                //todo\n                // let res = await axios.post\n            }\n        });\n    };\n\n    funcHandleSubmitRegister = () => {\n        this.props.form.validateFields([StringResource.register_username, StringResource.register_password, StringResource.register_confirm_password],async (err, values) => {\n            if (!err) {\n                //console.log('Received values of form: ', values);\n                this.setState({\n                    confirmLoading: true,\n                });\n                \n                \n                // setTimeout(() => {\n                //     this.setState({\n                //         visible: false,\n                //         confirmLoading: false,\n                //     });\n                // }, 2000);\n                //TODO\n                let res = await axios.post ('/register', {\n                    username: values[StringResource.register_username],\n                    password: values[StringResource.register_password],\n                  })\n                \n                \n                this.setState({\n                    visible: false,\n                    confirmLoading: false,\n                });\n                \n                \n            }\n        });\n    };\n\n    handleConfirmBlur = e => {\n        const { value } = e.target;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && value !== form.getFieldValue(StringResource.register_password)) {\n            callback('Two passwords that you enter is inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const { form } = this.props;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    // handleOk = () => {\n    //     this.setState({\n    //         confirmLoading: true,\n    //     });\n    //     setTimeout(() => {\n    //         this.setState({\n    //             visible: false,\n    //             confirmLoading: false,\n    //         });\n    //     }, 2000);\n    // };\n\n    handleCancel = () => {\n        console.log('Clicked cancel button');\n        this.setState({\n            visible: false,\n        });\n    };\n\n    funcShowRegisterModal = () => {\n        this.setState({\n            visible: true,\n        });\n    }\n\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        const { visible, confirmLoading } = this.state;\n        // const formItemLayout = {\n        //     labelCol: {\n        //       xs: { span: 24 },\n        //       sm: { span: 8 },\n        //     },\n        //     wrapperCol: {\n        //       xs: { span: 24 },\n        //       sm: { span: 16 },\n        //     },\n        //   };\n        const formItemLayout = {\n            labelCol: {\n                span: 8\n            },\n            wrapperCol: {\n                span: 16\n            },\n        };\n        return (\n            <Card className=\"ContainerCard\" title=\"DEMO\" extra={<a >Register</a>}  >\n                <Form onSubmit={this.funcHandleSubmitLogin} className=\"login-form\">\n                    <Form.Item>\n                        {getFieldDecorator(StringResource.username, {\n                            rules: [{ required: true, message: 'Please input your username!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                placeholder=\"Username\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n                        {getFieldDecorator(StringResource.password, {\n                            rules: [{ required: true, message: 'Please input your Password!' }],\n                        })(\n                            <Input\n                                prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                                type=\"password\"\n                                placeholder=\"Password\"\n                            />,\n                        )}\n                    </Form.Item>\n                    <Form.Item>\n\n\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Log in\n                        </Button>\n                        Or <a onClick={this.funcShowRegisterModal}>register now!</a>\n                    </Form.Item>\n                </Form>\n                <Modal\n                    centered\n                    title=\"Title\"\n                    visible={visible}\n                    onOk={this.funcHandleSubmitRegister}\n                    confirmLoading={confirmLoading}\n                    onCancel={this.handleCancel}\n                    width=\"600px\"\n                >\n                    {/* <p>register</p> */}\n                    <Form {...formItemLayout} onSubmit={this.handleSubmit} >\n                        <Form.Item label=\"user name\">\n                            {getFieldDecorator(StringResource.register_username, {\n                                rules: [\n                                    // {\n                                    //     type: 'email',\n                                    //     message: 'The input is not valid E-mail!',\n                                    // },\n                                    {\n                                        required: true,\n                                        message: 'Please input your user name!',\n                                    },\n                                ],\n                            })(<Input />)}\n                        </Form.Item>\n                        <Form.Item label=\"Password\" hasFeedback>\n                            {getFieldDecorator(StringResource.register_password, {\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!',\n                                    },\n                                    {\n                                        validator: this.validateToNextPassword,\n                                    },\n                                ],\n                            })(<Input.Password />)}\n                        </Form.Item>\n                        <Form.Item label=\"Confirm Password\" hasFeedback>\n                            {getFieldDecorator(StringResource.register_confirm_password, {\n                                rules: [\n                                    {\n                                        required: true,\n                                        message: 'Please confirm your password!',\n                                    },\n                                    {\n                                        validator: this.compareToFirstPassword,\n                                    },\n                                ],\n                            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n                        </Form.Item>\n                    </Form>\n                    \n\n\n                </Modal>\n\n            </Card>\n\n        );\n    }\n\n\n\n\n}\nconst LoginAndRegister = Form.create()(LoginAndRegisterBase);\nexport default LoginAndRegister;\n\n","// import React from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport './App.css';\nimport {Route,BrowserRouter } from 'react-router-dom'\nimport LoginAndRegister from './components/LoginAndRegister/LoginAndRegister.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <Route path='/login' component = {LoginAndRegister}></Route>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}